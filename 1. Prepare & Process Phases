

# Prepare & Process Phases
# Install and load packages

# ----------------
# PREPARE PHASE
# ----------------

install.packages("reshape2")

library(ggpubr)
library(tidyverse)
library(here)
library(skimr)
library(janitor)
library(lubridate)
library(ggrepel)
library(ggplot2)
library(reshape2)
library(scales)
library(dplyr)
library(tidyr)
library(here)

library(ggpmisc)
library(ggpubr)
library(rstatix)
library(lubridate)
library(ggpubr)
library(car)


# Upload raw data
daily_activity <- read.csv("dailyActivity_merged.csv")
daily_calories <- read.csv("dailyCalories_merged.csv")
daily_intensities <- read.csv("dailyIntensities_merged.csv")
daily_steps <- read.csv("dailySteps_merged.csv")

hourly_activity <- read.csv("hourly_activity.csv")
hourly_calories <- read.csv("hourlyCalories_merged.csv")
hourly_intensities <- read.csv("hourlyIntensities_merged.csv")

heart_rate <- read.csv("heartrate_seconds_merged.csv")
sleep_day <- read.csv("sleepDay_merged.csv")
weight_log <- read.csv("weightLogInfo_merged.csv")

# Quick overview
head(daily_activity)
colnames(daily_activity)
str(daily_activity)


# ----------------
# PROCESS PHASE
# ----------------

# Transforming datatype of 'ActivityDate' column and creating 'month', 'day', & 'time' from it
# daily_activity 1
# Convert 'ActivityDate' column to date time format and split to date and time.
daily_activity$ActivityDate=as.POSIXct(daily_activity$ActivityDate, format="%m/%d/%Y", tz=Sys.timezone())
daily_activity$date <- format(daily_activity$ActivityDate, format = "%m/%d/%y")
daily_activity$ActivityDate=as.Date(daily_activity$ActivityDate, format="%m/%d/%Y", tz=Sys.timezone())
daily_activity$date=as.Date(daily_activity$date, format="%m/%d/%Y")

# daily_activity 2
# Mutate ActivtyHour data type to date / time and create new time, date, month, and weekday columns in df
daily_activity$ActivityDate=as.POSIXct(daily_activity$ActivityDate, format="%m/%d/%Y", tz=Sys.timezone())
daily_activity$date <- format(daily_activity$ActivityDate, format = "%m/%d/%y")
daily_activity$month <- format(daily_activity$ActivityDate, format = "%B")
daily_activity$day <- format(daily_activity$ActivityDate, format = "%d")
daily_activity$weekday <- format(daily_activity$ActivityDate, format = "%A")

# daily_calories
# Mutate ActivtyHour data type to date / time and create new time, date, month, and weekday columns in df
daily_calories$ActivityDay=as.POSIXct(daily_calories$ActivityDay, format="%m/%d/%Y", tz=Sys.timezone())
daily_calories$month <- format(daily_calories$ActivityDay, format = "%B")
daily_calories$day <- format(daily_calories$ActivityDay, format = "%d")
daily_calories$weekday <- format(daily_calories$ActivityDay, format = "%A")

# daily_intensities
# Mutate ActivtyHour data type to date / time and create new time, date, and month columns in df
daily_intensities$ActivityDay=as.POSIXct(daily_intensities$ActivityDay, format="%m/%d/%Y", tz=Sys.timezone())
daily_intensities$month <- format(daily_intensities$ActivityDay, format = "%B")
daily_intensities$day <- format(daily_intensities$ActivityDay, format = "%d")
daily_intensities$weekday <- format(daily_intensities$ActivityDay, format = "%A")

# daily_steps
# Mutate ActivtyHour data type to date / time and create new time, date, and month columns in df
daily_steps$ActivityDay=as.POSIXct(daily_steps$ActivityDay, format="%m/%d/%Y", tz=Sys.timezone())
daily_steps$month <- format(daily_steps$ActivityDay, format = "%B")
daily_steps$day <- format(daily_steps$ActivityDay, format = "%d")
daily_steps$weekday <- format(daily_steps$ActivityDay, format = "%A")

# hourly_activity - didn't finish - X
# Mutate ActivtyHour data type to date / time and create new time, date, and month columns in df
hourly_activity$ActivityHour=as.POSIXct(hourly_activity$ActivityHour, format="%m/%d/%Y %I:%M", tz=Sys.timezone())
hourly_activity$hour <- format(hourly_activity$ActivityHour, format = "%H")
hourly_activity$date <- format(hourly_activity$ActivityHour, format = "%m/%d/%y")
hourly_activity$month <- format(hourly_activity$ActivityHour, format = "%B")

# hourly_calories
# Mutate ActivtyHour data type to date / time and create new time, date, and month columns in df
hourly_calories$ActivityHour=as.POSIXct(hourly_calories$ActivityHour, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
hourly_calories$time <- format(hourly_calories$ActivityHour, format = "%H:%M:%S")
hourly_calories$date <- format(hourly_calories$ActivityHour, format = "%m/%d/%y")
hourly_calories$month <- format(hourly_calories$ActivityHour, format = "%B")

# hourly_intensities
# Mutate ActivtyHour data type to date / time and create new time, date, and month columns in df
hourly_intensities$ActivityHour=as.POSIXct(hourly_intensities$ActivityHour, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
hourly_intensities$time <- format(hourly_intensities$ActivityHour, format = "%H:%M:%S")
hourly_intensities$date <- format(hourly_intensities$ActivityHour, format = "%m/%d/%y")
hourly_intensities$month <- format(hourly_intensities$ActivityHour, format = "%B")


# heart_rate
# Mutate Time data type to date / time and create new time, date, and month columns in df
heart_rate$Time=as.POSIXct(heart_rate$Time, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
heart_rate$date <- format(heart_rate$Time, format = "%m/%d/%y")
heart_rate$time <- format(heart_rate$Time, format = "%H")
heart_rate$month <- format(heart_rate$Time, format = "%B")

# sleep_day
# Mutate SleepDay data type to date / time and create new date and month columns in df
sleep_day$SleepDay=as.POSIXct(sleep_day$SleepDay, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
sleep_day$date <- format(sleep_day$SleepDay, format = "%m/%d/%y")
sleep_day$month <- format(sleep_day$SleepDay, format = "%B")
sleep_day$weekday <- format(sleep_day$SleepDay, format = "%A")

# weight_log
# Mutate Date data type to date / time and create new time, date, and month columns in df
weight_log$Date=as.POSIXct(weight_log$Date, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
weight_log$date <- format(weight_log$Date, format = "%m/%d/%y")
weight_log$time <- format(weight_log$Date, format = "%H:%M:%S")
weight_log$month <- format(weight_log$Date, format = "%B")


# Letâ€™s look at the total number of participants in each data sets:
daily_activity %>%
  summarise(Activity_participants = n_distinct(daily_activity$Id))

# Another way of looking at the total number of participants in each data sets:
n_distinct(daily_activity$Id)
n_distinct(daily_calories$Id)
n_distinct(daily_intensities$Id)
n_distinct(daily_steps$Id)
n_distinct(heart_rate$Id)
n_distinct(sleep_day$Id)
n_distinct(weight_log$Id)

# Counting no of rows
nrow(daily_activity) # Results message: [1] 940
nrow(daily_calories) # Results message: 
nrow(daily_intensities) # Results message: 
nrow(daily_steps) # Results message: 
nrow(heart_rate) # Results message: [1] 2483658
nrow(sleep_day) # Results message: [1] 413
nrow(weight_log) # Results message: [1] 67


# ----------------
# Removing Rows with Missing Values

# List of data frames
data_frames <- list(
  daily_activity = daily_activity,
  daily_calories = daily_calories,
  daily_intensities = daily_intensities,
  daily_steps = daily_steps,
  heart_rate = heart_rate,
  sleep_day = sleep_day,
  weight_log = weight_log
)

# Iterate over each data frame in the list
for (df_name in names(data_frames)) {
  cat("Data frame:", df_name, "\n")
  cat("Structure:\n")
  str(data_frames[[df_name]])
  cat("\n\n")
}

# Function to check NA and duplicates
check_na_duplicates <- function(df_name, df) {
  cat("NA values in", df_name, ":", sum(is.na(df)), "\n")
  cat("Duplicates in", df_name, ":", anyDuplicated(df), "\n")
}

# Loop through the list of data frames and apply the function
for (df_name in names(data_frames)) {
  check_na_duplicates(df_name, data_frames[[df_name]])
}

#Removing Rows with Missing Values
weight_log <- na.omit(weight_log)

#Removing Duplicates from 'weight_log'
weight_log <- weight_log[!duplicated(weight_log), ]

#Verifying the Removal
cat("Duplicates in weight_log after removal:", anyDuplicated(weight_log), "\n")
# ----------------


